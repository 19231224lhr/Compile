grammar lab3;

END : 'hello';
IDENTs : 'main';
LPar : '(';
RPar : ')';
FUNCTYPE : 'int';
LBrace : '{';
RBrace : '}';
RETURN : 'return';
Semicolon : ';';
Nondigit : [_a-zA-Z];
Nondigit_1 : [_a-zA-Z]+;
NondigitDigit : [_a-zA-Z][_a-zA-Z0-9]*[_a-zA-Z0-9];
Nonzerodigit : [1-9][0-9]*|[0];
Octaldigit : [0][0-7]+;
Hexadecimaldigit : [0-9a-fA-F]+;
Hexadecimalprefix : ('0x' | '0X')[0-9a-fA-F]+;
SL_COMMENT : '//' .*? '\n' -> skip;
SL_COMMENT_1 : '/*'(.|'\n')*?'*/' -> skip;
UnaryOp : '+' | '-';
UnaryOp_1 : '*' | '/' | '%';
Digit : [0-9];
Equal : '=';
WHITE_SPACE: [ \t\n] -> skip;

compunit : funcdef;
funcdef : FUNCTYPE IDENTs LPar RPar block;
block : LBrace (blockitem)* RBrace;
blockitem : decl | stmt;
stmt : lval Equal exp Semicolon | exp Semicolon | RETURN exp Semicolon;
lval : ident;
exp : addexp;
addexp : mulexp (UnaryOp mulexp)*;
mulexp : unaryexp (UnaryOp_1 unaryexp)*;
unaryexp : primaryexp | UnaryOp unaryexp | ident LPar (funcRParams)* RPar;
funcRParams : exp (',' exp)*;
primaryexp : LPar exp RPar | lval | number;
number : decimalconst | octalconst | hexadecimalconst;
decimalconst : Nonzerodigit;
octalconst : Octaldigit;
hexadecimalconst : Hexadecimalprefix;
decl : constDecl | varDecl;
constDecl : 'const' FUNCTYPE constDef (',' constDef)* Semicolon;
bType : FUNCTYPE;
constDef : ident Equal constInitVal;
constInitVal : constExp;
constExp : addexp;
varDecl : FUNCTYPE varDef (',' varDef)* Semicolon;
varDef : ident | ident Equal initVal;
initVal : exp;
ident : nondigit | nondigit_1 | nondigitDigit;
nondigit : Nondigit;
nondigit_1 : Nondigit_1;
nondigitDigit : NondigitDigit;
