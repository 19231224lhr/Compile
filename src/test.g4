grammar test;

END : 'hello';
IDENT : 'main';
LPar : '(';
RPar : ')';
FUNCTYPE : 'int';
LBrace : '{';
RBrace : '}';
RETURN : 'return';
Semicolon : ';';
Nonzerodigit : [1-9][0-9]*|[0];
Octaldigit : [0][0-7]+;
Hexadecimaldigit : [0-9a-fA-F]+;
Hexadecimalprefix : ('0x' | '0X')[0-9a-fA-F]+;
SL_COMMENT : '//' .*? '\n' -> skip;
SL_COMMENT_1 : '/*'(.|'\n')*?'*/' -> skip;
UnaryOp : '+' | '-';
UnaryOp_1 : '*' | '/' | '%';
WHITE_SPACE: [ \t\n] -> skip;

compunit : funcdef;
funcdef : FUNCTYPE IDENT LPar RPar block;
block : LBrace stmt RBrace;
stmt : RETURN exp Semicolon;
exp : addexp;
addexp : mulexp (UnaryOp mulexp)*;
mulexp : unaryexp (UnaryOp_1 unaryexp)*;
unaryexp : primaryexp | UnaryOp unaryexp;
primaryexp : LPar exp RPar | number;
number : decimalconst | octalconst | hexadecimalconst;
decimalconst : Nonzerodigit;
octalconst : Octaldigit;
hexadecimalconst : Hexadecimalprefix;
